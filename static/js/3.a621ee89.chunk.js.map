{"version":3,"sources":["HOC/WithAuthRedirect.tsx","components/Profile/Profileinfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profileinfo/ProfileStatusWithHooks.tsx","components/Profile/Profileinfo/ProfileDataForm.tsx","components/Profile/Profileinfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsAuth","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","src","alt","s","descriptionBlock","photos","small","userPhoto","avatar","target","files","length","initialValues","formData","Post","item","message","counts","maxLength10","maxLengthCreator","MyPostsMemo","React","memo","postsData","posts","p","id","likesCount","postsBlock","AddPostFormRedux","values","addPost","newPostText","required","MyPostsContainer","profilePage","actions","addPostActionCreator","MyPosts","Profile","ProfileContainer","userId","this","match","params","AuthoriseduserId","history","push","setUsersProfile","getStatus","console","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.a621ee89.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../Redux/Redux-store'\r\n\r\nlet mapStateToPropsAuth = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & DispatchPropsType> = (props) => {\r\n        let { isAuth, ...restProps } = props\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n\r\n        return <Component {...restProps as unknown as WCP} />\r\n    }\r\n    let ConnectAuthRedirectComponent = connect<MapStatePropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsAuth, {})(RedirectComponent)\r\n    return ConnectAuthRedirectComponent\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2BxW4\",\"avatar\":\"ProfileInfo_avatar__1hcsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1ZGCU\",\"posts\":\"MyPosts_posts__3k9SC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2aP0O\"};","import React, { useState, ChangeEvent } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../Common/Preloader/Preloader'\r\nimport { useEffect } from 'react'\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className=\"\">\r\n                    <span onDoubleClick={activateEditMode} >{props.status || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div className=\"\">\r\n                    <input onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        autoFocus={true} \r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport { createField, Input, Textarea, GetStringCase } from '../../Common/Preloader/FormControl/FrontControls'\r\nimport { reduxForm, InjectedFormProps } from 'redux-form'\r\nimport style from '../../Common/Preloader/FormControl.module.css'\r\nimport { profileType } from '../../../Types/Types'\r\n\r\ntype PropsType = {\r\n    profile: profileType\r\n}\r\n\r\ntype ProfileTypekeys = GetStringCase<profileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<profileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>\r\n                save\r\n            </button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypekeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job?</b>: {createField<ProfileTypekeys>(\"\", \"lookingForAJob\", [], Input, { type: 'checkbox' })}\r\n        </div>\r\n        <div>\r\n            <b>My proffesional skills</b>: {createField<ProfileTypekeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField<ProfileTypekeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contact</b> : {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<profileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n{/* <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} /> */ }\r\n\r\n","import React, { useState, ChangeEvent } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../Common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../Assets/Images/user.png'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport { profileType, contactsType } from '../../../Types/Types'\r\n\r\ntype PropsType = {\r\n    profile: profileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: profileType) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: profileType) => {\r\n        saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <img src='https://static.scientificamerican.com/sciam/cache/file/BCC3BD1E-5DC0-4843-A841706AE575C694_source.jpg?w=590&h=800&39BBF62E-5F96-4C6A-A59590CCF416DA11' alt=\"\" />\r\n        </div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.small || userPhoto} className={s.avatar}/>\r\n            {isOwner && <input type={\"file\"} onChange={mainPhotoSelected} />}\r\n            <ProfileStatusWithHooks\r\n                status={status}\r\n                updateStatus={updateStatus} />\r\n            {editMode ?\r\n                <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> :\r\n                <ProfileData goToEditMode={() => { setEditMode(true) }}\r\n                    profile={profile} isOwner={isOwner}\r\n                />}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ProfilePropsDataType = {\r\n    profile: profileType, \r\n    isOwner: boolean, \r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfilePropsDataType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div>\r\n        {isOwner &&\r\n            <div>\r\n                <button onClick={goToEditMode}>\r\n                    Edit\r\n            </button>\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job?</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My proffesional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contact</b> : {\r\n            Object\r\n            .keys(profile.contacts)\r\n            .map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof contactsType]} />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactType> = ({ contactTitle, contactValue }) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    counts: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return <div className={s.item}>\r\n                <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTy8Debz_x-xhnax66XckOomVSFRyoIXLGumg&usqp=CAU' alt=''/>\r\n                <div>\r\n                    {props.message}\r\n                </div>\r\n                <span>\r\n                    like {props.counts} \r\n                </span>\r\n            </div>\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form'\r\nimport { required, maxLengthCreator } from '../../../Utils/Validators/validators'\r\nimport { Textarea, createField, GetStringCase, Input } from '../../Common/Preloader/FormControl/FrontControls'\r\nimport { dialogsType } from '../../../Redux/Dialogs-reducer'\r\nimport { arrayStateType } from '../../../Types/Types'\r\n// import { addPostActionCreator, updateNewPostText } from '../../../Redux/Profile-reducer'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<arrayStateType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype NewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let postsData = props.posts\r\n        .map(p => <Post message={p.message} key={p.id} counts={p.likesCount} />)\r\n\r\n    let onaddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3>My post</h3>\r\n        <div>\r\n            <AddPostFormRedux onSubmit={onaddPost} />\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postsData}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst MyPostsMemo = React.memo(MyPosts)\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype NewPostsKeysType = Extract<keyof NewPostFormType, string>\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<NewPostFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        < form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewPostsKeysType>('newPostText', 'newPostText', [required, maxLength10], Input)}\r\n            </div>\r\n            <div><button>Text</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<NewPostFormType>({ form: 'newPostText' })(AddNewPostForm)\r\n\r\nexport default MyPostsMemo","import { actions } from '../../../Redux/Profile-reducer'\r\nimport MyPosts, {DispatchPropsType, MapPropsType } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../Redux/Redux-store'\r\n\r\nlet mapStatePosts = (state : AppStateType) => {\r\n    return {\r\n    posts: state.profilePage.posts,\r\n    // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\n// let mapDispatchPosts = (dispatch) => {\r\n//     return {\r\n//         addPost : (newPostText) => {\r\n//             dispatch(actions.addPostActionCreator(newPostText))\r\n//         }\r\n//     }\r\n// }\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStatePosts, {addPost: actions.addPostActionCreator})(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react'\r\n// import MyPosts from './MyPosts/MyPosts'\r\nimport ProfileInfo from './Profileinfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport { profileType } from '../../Types/Types'\r\n\r\ntype PropsType = {\r\n    profile: profileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: profileType) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                saveProfile={props.saveProfile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { setUsersProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../Redux/Profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../HOC/WithAuthRedirect'\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../Redux/Redux-store';\r\nimport { profileType } from '../../Types/Types';\r\nimport { RouteComponentProps } from 'react-router'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setUsersProfile: (userId: number) => void,\r\n    getStatus: (userId: number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: profileType) => Promise<any>\r\n    // profile: profileType\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype Created = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\nclass ProfileContainer extends React.Component<Created> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.AuthoriseduserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"id should exist\")\r\n        } else {\r\n            this.props.setUsersProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Created, prevState: Created) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n            isOwner={!this.props.match.params.userId}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n            savePhoto={this.props.savePhoto} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    AuthoriseduserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { setUsersProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}