{"version":3,"sources":["components/Dialogs/Dialog.module.css","HOC/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsAuth","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","p","path","id","className","s","dialog","active","name","Message","message","maxLength10","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Input","Dialogs","messagesPage","dialogsElements","dialogs","map","key","messagesElements","messages","dialogsItem","values","addMessage","newMessageText","compose","actions"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,YAAc,4BAA4B,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,0B,8GCIxKC,EAAsB,SAACC,GAAD,MAA0B,CAChDC,OAAQD,EAAME,KAAKD,SAShB,SAASE,EAAsBC,GAQlC,OADmCC,YAAiEN,EAAqB,GAAtFM,EANwC,SAACC,GAAW,IAC7EL,EAAyBK,EAAzBL,OAAWM,EADiE,YACnDD,EADmD,YAElF,OAAKL,EAEE,kBAACG,EAAcG,GAFF,kBAAC,IAAD,CAAUC,GAAI,gB,sGCA3BC,EATyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAEE,GAC3B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASR,GAAIG,GAAOD,EAAEO,QCEnBC,EARsB,SAACR,GAClC,OACI,yBAAKG,UAAWC,IAAEC,QACbL,EAAES,U,yBCHTC,EAAcC,YAAiB,IAetBC,cAA8B,CAAEC,KAAM,kBAAtCD,EAXgF,SAAChB,GAC5F,OACI,0BAAOkB,SAAUlB,EAAMmB,cACnB,6BACCC,YAAgC,qBAAuB,iBAAkB,CAACC,IAAUP,GAAcQ,MAEnG,6BAAK,6CC0BFC,GAlCKR,YAAiB,IAWG,SAACf,GAErC,IAAIN,EAAQM,EAAMwB,aAEdC,EAAkB/B,EAAMgC,QACvBC,KAAI,SAAAlB,GAAM,OAAI,kBAAC,EAAD,CAAYE,KAAMF,EAAOE,KAAMiB,IAAKnB,EAAOH,GAAIA,GAAIG,EAAOH,QAEzEuB,EAAmBnC,EAAMoC,SACxBH,KAAI,SAAAd,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASe,IAAKf,EAAQP,QAMpE,OACI,yBAAKC,UAAWC,IAAEkB,SACd,yBAAKnB,UAAWC,IAAEuB,aACbN,GAEL,yBAAKlB,UAAWC,IAAEsB,UAAWD,GAC7B,kBAAC,EAAD,CAAgBX,SAVJ,SAACc,GACjBhC,EAAMiC,WAAWD,EAAOE,sB,wBCAjBC,4BACXpC,aAxBkB,SAACL,GACnB,MAAO,CACH8B,aAAc9B,EAAM8B,gBAsBjB,eACAY,MAEPvC,IAJWsC,CAKbZ","file":"static/js/4.f834ed7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__30d5x\",\"dialogsItem\":\"Dialog_dialogsItem__1l3tY\",\"active\":\"Dialog_active__UP-OJ\",\"messages\":\"Dialog_messages__1FjeZ\",\"message\":\"Dialog_message__3XCT-\"};","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../Redux/Redux-store'\r\n\r\nlet mapStateToPropsAuth = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & DispatchPropsType> = (props) => {\r\n        let { isAuth, ...restProps } = props\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n\r\n        return <Component {...restProps as unknown as WCP} />\r\n    }\r\n    let ConnectAuthRedirectComponent = connect<MapStatePropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsAuth, {})(RedirectComponent)\r\n    return ConnectAuthRedirectComponent\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport s from './../Dialog.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (p) => {\r\n    let path = \"/dialogs/\" + p.id\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{p.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport s from './../Dialog.module.css'\r\n\r\ntype PropsType ={\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (p) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            {p.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form'\r\nimport {Textarea, createField, Input} from '../Common/Preloader/FormControl/FrontControls'\r\nimport { required, maxLengthCreator } from '../../Utils/Validators/validators'\r\n// import AddMessageForm from './AddMessageForm'\r\nimport { NewMessageFormType } from './Dialogs'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype NewMessageKeysType = Extract<keyof NewMessageFormType, string>\r\ntype PropsType = {}\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        < form onSubmit={props.handleSubmit}>\r\n            <div>\r\n            {createField<NewMessageKeysType>('enter your message' , 'newMessageText', [required, maxLength10], Input)}\r\n            </div>\r\n            <div><button>Text</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormType>({ form: 'newMessageText' })(AddMessageForm)","import React from 'react'\r\nimport s from './Dialog.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { required, maxLengthCreator } from '../../Utils/Validators/validators'\r\nimport { initialStateType } from '../../Redux/Dialogs-reducer'\r\nimport AddMessageForm from './AddMessageForm'\r\n// import { addMessageActionCreator, updateNewMessageText } from '../../Redux/Dialogs-reducer'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype OwnPropsType = {\r\n    messagesPage: initialStateType\r\n    addMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n\r\n    let state = props.messagesPage\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />)\r\n\r\n    let messagesElements = state.messages\r\n        .map(message => <Message message={message.message} key={message.id} />)\r\n\r\n    let addNewMessage = (values: { newMessageText: string }) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>{messagesElements}</div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>)\r\n}\r\nexport default Dialogs\r\n\r\n","import React from 'react'\r\nimport { actions } from '../../Redux/Dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../HOC/WithAuthRedirect'\r\nimport { AppStateType } from '../../Redux/Redux-store'\r\nimport { compose } from 'redux'\r\n\r\nlet mapStateToProps = (state : AppStateType) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        // newMessageText: state.messagesPage.newMessageText,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addMessage: (newMessageText) => {\r\n//             dispatch(actions.addMessageActionCreator(newMessageText))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n// export default DialogsContainer\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        ...actions\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs) \r\n\r\n\r\n"],"sourceRoot":""}